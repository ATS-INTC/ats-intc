<?xml version="1.0" encoding="utf-8"?>

<device schemaVersion="1.3"
  xmlns:xs="http://www.w3.org/2001/XMLSchema-instance"
  xs:noNamespaceSchemaLocation="cmsis-svd.xsd">
  <name>ats-intc</name>
  <version>0.0</version>
  <description>Asynchronous task scheduler and Interrupt controller description</description>

  <addressUnitBits>8</addressUnitBits>                  <!-- byte addressable memory -->
  <width>32</width>                                     <!-- bus width is 32 bits -->
  <size>32</size>                                       <!-- this is the default size (number of bits) of all peripherals
                                                                       and register that do not define "size" themselves -->
  <resetValue>0x00000000</resetValue>                   <!-- by default all bits of the registers are initialized to 0
  on reset -->
  <resetMask>0xFFFFFFFF</resetMask>                     <!-- by default all 32Bits of the registers are used -->

  <peripherals>
    <!-- axi_dma_0 -->
    <peripheral>
      <name>ATS-INTC</name>
      <description>Asynchronous task scheduler and Interrupt controller description</description>
      <baseAddress>0x60040000</baseAddress>     <!-- mmio baseaddr -->
      <size>32</size>            <!-- default bit-width of any register contained in the device -->
      <addressBlock>
        <offset>0x0</offset>
        <size>0x1000</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>control</name>
          <description>The transaction control register</description>
          <addressOffset>0x0</addressOffset>
          <access>read-write</access>
          <fields>
            <field>
              <name>reset</name>
              <description>Software reset for reseting the executor channel</description>
              <bitRange>[0:0]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>complete</name>
                  <value>0x0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reset</name>
                  <value>0x1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>lhandler</name>
              <description>Software load handler task flag</description>
              <bitRange>[1:1]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>complete</name>
                  <value>0x0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>load</name>
                  <value>0x1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>stask</name>
              <description>Software store task flag</description>
              <bitRange>[2:2]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>complete</name>
                  <value>0x0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>start</name>
                  <value>0x1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ftask</name>
              <description>Software fetch task flag</description>
              <bitRange>[3:3]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>complete</name>
                  <value>0x0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>start</name>
                  <value>0x1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>memcache</name>
              <description>When initializing, the software will alloc a memory area and set it as the Executor cache.</description>
              <bitRange>[4:4]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>complete</name>
                  <value>0x0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>start</name>
                  <value>0x1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>

        <register>
          <name>stask_lsb</name>
          <description>When the software store the task, it will write the register.(LSB)</description>
          <addressOffset>0x4</addressOffset>
          <access>read-write</access>
        </register>
        <register>
          <name>stask_msb</name>
          <description>When the software store the task, it will write the register.(MSB)</description>
          <addressOffset>0x8</addressOffset>
          <access>read-write</access>
        </register>
        <register>
          <name>ftask_lsb</name>
          <description>When the software fetch task, it will read from this register.(LSB)</description>
          <addressOffset>0xc</addressOffset>
          <access>read-write</access>
        </register>
        <register>
          <name>ftask_msb</name>
          <description>When the software fetch task, it will read from this register.(MSB)</description>
          <addressOffset>0x10</addressOffset>
          <access>read-write</access>
        </register>
        <register>
          <name>handler_lsb</name>
          <description>The handler task pointer lsb</description>
          <addressOffset>0x14</addressOffset>
          <access>read-write</access>
        </register>
        <register>
          <name>handler_msb</name>
          <description>The handler task pointer msb</description>
          <addressOffset>0x18</addressOffset>
          <access>read-write</access>
        </register>
        <register>
          <name>irq</name>
          <description>The irq register, when the software store handler task, it will write the relative irq.</description>
          <addressOffset>0x1c</addressOffset>
          <access>read-write</access>
        </register>
        <register>
          <name>memcache_lsb</name>
          <description>The in-memory cache address.(LSB)</description>
          <addressOffset>0x20</addressOffset>
          <access>read-write</access>
        </register>
        <register>
          <name>memcache_Msb</name>
          <description>The in-memory cache address.(MSB)</description>
          <addressOffset>0x24</addressOffset>
          <access>read-write</access>
        </register>
        <register>
          <name>priority</name>
          <description>The task priority.</description>
          <addressOffset>0x28</addressOffset>
          <access>read-write</access>
        </register>

      </registers>
    </peripheral>
  </peripherals>

</device>